# Code needed to cleanly bootstrap the reset of shellrc

# All code here should be run under any sh-compatible 
# shell and under any environment given the GNU userland.
# Code that cannot be made sh-compatible should go 
# As a function into a shell-specific shell.d/init.$RUNNING_SHELL
# Attempts will be made to make the BSD userland work, too
# but they are largely untested

# set -x

_load_shellrc_path()
{
    local _shellrc_path="$HOME/.shellrc/$1/"
    local -a files

    if [ ! -e "$_shellrc_path" ]; then
      return 0
    fi

    local shellregex=$(_build_load_regex)
    
    files=( $(find $_shellrc_path -iregex "$shellregex" -type f -print | sort) )

    for file in "${files[@]}"; do
      [ -e "$file" ] || continue
      source $file
    done
}

_build_load_regex()
{
  local extension_regex
  # Because this is slow on cygwin and join is single-char, 
  # Do this with builtins... ugh.
  local IFS=$' ' init_extensions=( $(_shell_init_extensions) )
  
  # zsh and bash use different start points, so use our own
  i=0

  for extension in "${init_extensions[@]}"; do
    i=$((i + 1))
    extension_regex+=".*\.${extension}"
    if [ $i -lt "${#init_extensions[*]}" ]; then
      extension_regex+="\|"
    fi
  done

  echo $extension_regex
}

###
# There are several cases during load where $SHELL isn't correct
# We need to detect the actual shell during load, so we can avoid
# trying to init the incorrect one.
_detect_shell()
{
  local SHELL_COMMAND=$(basename $(ps -p $$ | tail -1 | awk '{print $NF}'))

  if [[ "$SHELL_COMMAND" =~ bash ]]; then
    echo 'bash';
  elif [[ "$SHELL_COMMAND" =~ zsh ]]; then
    echo 'zsh';
  else
    echo 'bash'
  fi
}

_load_shell_init()
{
  RUNNING_SHELL=$(_detect_shell)

  local INIT_FILE="$HOME/.shellrc/shell.conf.d/init.$RUNNING_SHELL"

  if [ -e $INIT_FILE ]; then
    source $INIT_FILE
  fi
}

pathappend() {
  for ARG in "$@"; do
    if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
        PATH="${PATH:+"$PATH:"}$ARG"
    fi
  done
}

pathprepend() {
  for ARG in "$@"; do
    if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
        PATH="$ARG${PATH:+":$PATH"}"
    fi
  done
}

# Removes duplicates from path. Important on Cygwin.
_cleanup_path() {
  PATH=$(echo "$PATH" | awk -v RS=':' -v ORS=":" '!a[$1]++{if (NR > 1) printf ORS; printf $a[$1]}')  
}

###
# Detect platform
_detect_platform() {
  _PLATFORM='unknown'
  _RELEASE='unknown'
  
  local _uname=$(uname  | tr '[A-Z]' '[a-z]')

  if [[ "$_uname" =~ 'linux' ]]; then
    _PLATFORM='linux'
  elif [[ "$_uname" =~ '^darwin' ]]; then
    _PLATFORM='darwin'
  elif [[ "$_uname" =~ 'bsd' ]]; then
    _PLATFORM='bsd'
  elif [[ "$_uname" =~ 'cygwin' ]]; then
    _PLATFORM='cygwin'
  fi

  if [[ -f /etc/debian_version ]]; then
    _RELEASE='debian'
  elif [[ "$_uname" =~ 'freebsd' ]]; then
    _RELEASE='freebsd'
  fi
}

# Environment detection functions
is_osx() {
  [[ "$_PLATFORM" =~ "darwin" ]] || return 1
}

is_debian() {
  [[ "$_RELEASE" =~ 'debian' ]] || return 1
}

is_cygwin() {
  [[ "$_PLATFORM" =~ "cygwin" ]] || return 1
}

is_bsd() {
  [[ "$_PLATFORM" =~ "bsd" ]] || return 1
}

is_linux() {
  [[ "$_PLATFORM" =~ "linux" ]] || return 1
}

_load_environment_init() {
  local _shellrc_path="$HOME/.shellrc/init.d"
  if is_debian; then
    [ -f $_shellrc_path/init.debian ] && source $_shellrc_path/init.debian
  elif is_osx; then
    [ -f $_shellrc_path/init.osx ] && source $_shellrc_path/init.osx
  elif is_cygwin; then
    [ -f $_shellrc_path/init.cygwin ] && source $_shellrc_path/init.cygwin
  fi
}

# Use declare, as "type" is slow in cygwin
__is_callable() {
	declare -Ff $1 > /dev/null; 
	return $?
}

# This makes both the calling of this script 
# and the _init_shellrc function itself idempotent
# The function simply redefines itself after the first run.

if ! __is_callable _init_shellrc ; then
  _init_shellrc() {
    _detect_platform

    _load_shell_init
    # Load shell-specific init functions
    _load_shellrc_path 'init.d'
   
    # The previous can overwrite these in a few rare cases.
    _load_shell_init

    # Load encironment-specific init functions
    # _load_environment_init

    # Redefine to make idempotent

    function _init_shellrc() {
       : # sh is weird.  ":"" is the null command, but you can't have empty functions
    }
  }
fi

_init_shellrc
