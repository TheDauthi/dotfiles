#!/usr/bin/env sh

_maximize_pane() {
  current_session=${1:-$(tmux display -p '#{session_name}')}  #'
  current_pane=${2:-$(tmux display -p '#{pane_id}')}          #'

  dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -o '^1 %.\+maximized.\+$' || true)
  restore=$(echo "$dead_panes" | sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p" -e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p" )

  if [ -z "$restore" ]; then
    [ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1 ] && tmux display "Can't maximize with only one pane" && return
    window=$(tmux new-window -t "$current_session:" -P "exec maximized... 2> /dev/null & tmux setw -t \"$current_session:\" remain-on-exit on; printf \"Pane has been maximized, press <prefix>+ to restore. %s\" '$current_pane'")
    window=${window%.*}

    guard=10
    while [ x"$(tmux list-panes -t "$window" -F '#{session_name}:#{window_index} #{pane_dead}' 2>/dev/null)" != x"$window 1" ] && [ "$guard" -ne 0 ]; do
      sleep 0.01
      guard=$((guard - 1))
    done
    if [ "$guard" -eq 0 ]; then
      tmux display 'Unable to maximize pane'
    fi

    new_pane=$(tmux display -t "$window" -p '#{pane_id}')
    tmux setw -t "$window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
  else
    $restore || tmux kill-pane
  fi
}

_urlview() {
  tmux capture-pane -J -S - -E - -b "urlview-$1" -t "$1"
  tmux split-window "tmux show-buffer -b urlview-$1 | urlview || true; tmux delete-buffer -b urlview-$1"
}

_fpp() {
  tmux capture-pane -J -S - -E - -b "fpp-$1" -t "$1"
  tmux split-window "tmux show-buffer -b fpp-$1 | uniq | fpp || true; tmux delete-buffer -b fpp-$1"
}

_split_window() {
  tty=${1:-$(tmux display -p '#{pane_tty}')} #'
  shift
  # shellcheck disable=SC2039
  if [ x"$OSTYPE" = x"cygwin" ]; then
    pid=$(ps -a | sort -d | awk -v tty="${tty##/dev/}" '$5 == tty && /ssh/ && !/-W/ { print $1; exit 0 }')
    [ -n "$pid" ] && ssh=$(tr '\0' ' ' < "/proc/$pid/cmdline")
  else
    ssh=$(ps -t "$tty" -o command= | sort -d | awk '/ssh/ && !/-W/ { print $0; exit 0 }')
  fi
  if [ -n "$ssh" ]; then
    # shellcheck disable=SC2046
    tmux split-window "$@" $(echo "$ssh" | sed -e "s/;/\\\\;/g")
  else
    tmux split-window "$@"
  fi
}

_toggle_mouse() {
  old=$(tmux show -gv mouse)
  new=""

  if [ "$old" = "on" ]; then
    new="off"
  else
    new="on"
  fi

  tmux set -g mouse $new \;\
       display "mouse: $new"
}

_edit_printscreen() {
  buffer_tempfile="$(mktemp)"
  tmux capture-pane -t "$pane" -S -32768
  tmux save-buffer "$buffer_tempfile"
  tmux delete-buffer
  tmux new-window -n "PRINTSCREEN" "$EDITOR $buffer_tempfile; rm $buffer_tempfile"
}

_attach_clipboard_bindings() {
  if command -v pbcopy > /dev/null 2>&1; then
    tmux bind -t vi-copy y copy-pipe 'pbcopy' 2> /dev/null || true
    tmux bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'pbcopy' 2> /dev/null || true
  fi
  if command -v reattach-to-user-namespace > /dev/null 2>&1; then
    tmux bind -t vi-copy y copy-pipe 'reattach-to-user-namespace pbcopy' 2> /dev/null || true
    tmux bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy' 2> /dev/null || true
  fi
  if command -v xsel > /dev/null 2>&1; then
    tmux bind -t vi-copy y copy-pipe 'xsel -i -b' 2> /dev/null || true
    tmux bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'xsel -i -b' 2> /dev/null || true
  fi
  if ! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1; then
    tmux bind -t vi-copy y copy-pipe 'xclip -i -selection clipboard > /dev/null 2>&1' 2> /dev/null || true
    tmux bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'xclip -i -selection clipboard > /dev/null 2>&1' 2> /dev/null || true
  fi
  if command -v clip.exe > /dev/null 2>&1; then
    tmux bind -t vi-copy y copy-pipe 'clip.exe' 2> /dev/null || true
    tmux bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'clip.exe' 2> /dev/null || true
  fi
  if [ -c /dev/clipboard ] > /dev/null 2>&1; then
    tmux bind -t vi-copy y copy-pipe 'cat > /dev/clipboard' 2> /dev/null || true
    tmux bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'cat > /dev/clipboard' 2> /dev/null || true
  fi
}

"$@"